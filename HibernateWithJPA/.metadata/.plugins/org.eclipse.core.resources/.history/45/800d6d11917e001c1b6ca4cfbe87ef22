package com.te.employee.dao;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;
import javax.persistence.Query;
import javax.persistence.TypedQuery;
import javax.transaction.Transaction;

import org.springframework.stereotype.Repository;

import com.te.employee.bean.EmployeeDetails;

@Repository
public class EmployeeDbImpl implements EmployeeDb {

	@Override
	public EmployeeDetails login(int id, String password) {
		EntityManagerFactory factory = Persistence.createEntityManagerFactory("emp");
		EntityManager manager = factory.createEntityManager();

		EmployeeDetails details = manager.find(EmployeeDetails.class, id);
		if (details != null) {
			if (details.getPassword().equals(password)) {
				return details;
			}
		}
		return null;
	}

	@Override
	public boolean addEmp(EmployeeDetails details) {
		EntityTransaction transaction = null;
		boolean isAdded = false;

		try {
			EntityManagerFactory factory = Persistence.createEntityManagerFactory("emp");
			EntityManager manager = factory.createEntityManager();

			transaction = manager.getTransaction();

			transaction.begin();
			manager.persist(details);
			transaction.commit();
			isAdded = true;

		} catch (Exception e) {
			if (transaction != null) {
				transaction.rollback();
			}
		}

		return isAdded;
	}

	@Override
	public boolean deleteData(int id) {
		EntityTransaction transaction = null;
		boolean isDeleted = false;
		try {
			EntityManagerFactory factory = Persistence.createEntityManagerFactory("emp");
			EntityManager manager = factory.createEntityManager();
			transaction = manager.getTransaction();

			transaction.begin();
			EmployeeDetails details = manager.find(EmployeeDetails.class, id);

			manager.remove(details);
			transaction.commit();
			isDeleted = true;

		} catch (Exception e) {
			if (transaction != null) {
				transaction.rollback();
			}
		}

		return isDeleted;
	}

	@Override
	public EmployeeDetails getData(int id) {
		EntityManagerFactory factory = Persistence.createEntityManagerFactory("emp");
		EntityManager manager = factory.createEntityManager();
		EmployeeDetails details = manager.find(EmployeeDetails.class, id);
		if (details != null) {
			return details;
		} else {
			return null;
		}

	}

	@Override
	public List<EmployeeDetails> allEmpData() {
		EntityManagerFactory factory = Persistence.createEntityManagerFactory("emp");
		EntityManager manager = factory.createEntityManager();
		String query ="from emp_info";
		Query query2= manager.createQuery(query);
		List list=query2.getResultList();
		return list;
		
		
	}

}
